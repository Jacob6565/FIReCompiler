RobotProperties
{
      RobotName:AlmostTheDestroyer;
      RobotType:AdvancedRobot;
      BodyColor:yellow;
      GunColor:red;
      RadarColor:white;
}

number power(number x)
{
    return x*x;
}


text currentRival = "Sitting1Duck";
bool shootingAtRival = false;
text ScannedRobots[10];
bool Flags[10];
number FirePowers[3];
number index = 0;


number f()
{
    number p[10];
    return p[1];
}


strategy Default()
{
    number y = 3;

    routine()
    {
        setTurnGunRight(360);
        setTurnGunLeft(360);
        execute();
    }
    when (ScannedRobotEvent e)
    {
        if (e.getName() == currentRival)
        {
            fire(3);
            SaveScannedRobotsNames(e.getName());
            Offensive();
            shootingAtRival = true;
        }
        else
        {
            fire(1);
            SaveScannedRobotsNames(e.getName());
            shootingAtRival = false;
        }
    }
    when (LowHealth e)
    {
        print("Wow, I am going to die!");
    }
}

void SaveScannedRobotsNames(text robotName)
{
    if(index >= 9)
    {
        index = 0;
    }
    ScannedRobots[index] = robotName;
    index = index + 1;
}

strategy Offensive()
{
    number y = 4;
    routine()
    {
        if(shootingAtRival)
        {
            f();
            print("I am gonna get you!");
        }
        else if(!Flags[0])
        {
            y = 5;
        }

        setTurnGunRight(360);
        setTurnGunLeft(360);
        execute();
    }

    when (ScannedRobotEvent e)
    {
        if (e.getName() == currentRival)
        {
            fire(3);
            SaveScannedRobotsNames(e.getName());
            shootingAtRival = true;
        }
        else
        {
            fire(1);
            SaveScannedRobotsNames(e.getName());
            Default();
            shootingAtRival = false;
        }
    }
    when (LowHealth e)
    {
        bool a = true;
        bool b = true;
        bool c = !(a and b);
        number d = ((2+3) + (4+1) - (3))*6;
        print("Wow, I am going to die!");
    }
}

event LowHealth()
{
    number myLifePoints = getEnergy();
    number criticalLifePoints = 20;
    return myLifePoints <= criticalLifePoints;
}