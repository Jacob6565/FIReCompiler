RobotProperties{
RobotName:Derpdynamite;
RobotType:AdvancedRobot;
BodyColor:red;
GunColor:white;
RadarColor:white;
}

bool firstFire = true;
number firepower = 0;
number lastKnownDistanceToEnemy = 0;
number counter = 0;
bool derp = true;


strategy Default(){
    routine(){
           normalPredictiveFire();
    }
}

strategy normalPredictiveFire(){
    routine(){
        if(counter % 10 == 0){
            derp = !derp;
        }
        setTurnRadarRight(10);
        if(derp){
            setAhead(10);
        }
        else {
            setBack(10);
        }
        counter = counter + 1;
    }

    when(ScannedRobotEvent enemytank){
        lastKnownDistanceToEnemy = enemytank.getDistance();

        number bearing = enemytank.getBearingRadians();

        number energy = enemytank.getEnergy();

        number heading = enemytank.getHeadingRadians();

        number enemyVelocity = enemytank.getVelocity();

        number bulletVelocity = 20 - firepower * 3;

        firepower = calcFirepower();

        setTurnRadarRight(calcRadarTurnForLock(heading));

        setTurnGunRight(calcGunRotation(enemyVelocity, heading, bulletVelocity));

        if(firstFire){
            firstFire = false;
        }
        else {
            setFire(firepower);
            execute();
        }
    }
}


number calcGunRotation(number enemyVelocity, number heading ,number bulletVelocity){
    number time = lastKnownDistanceToEnemy / bulletVelocity;
    number somethingVelocity = bulletVelocity;

    return heading - getGunHeading() + (lastKnownDistanceToEnemy/somethingVelocity);
}

number calcRadarTurnForLock(number EnemyBearingRadians){
    number angleToEnemy = getHeading() + EnemyBearingRadians;
    number radarTurn = angleToEnemy - getRadarHeading();

    number arctancalc = (36.0 / lastKnownDistanceToEnemy);
    number ExtraRadarTurn = (arctancalc)/(1+(arctancalc^2))^0.5;

    if (radarTurn < 0){
       radarTurn = radarTurn - ExtraRadarTurn;
    }
    else
    {
        radarTurn = radarTurn + ExtraRadarTurn;
    }

     return radarTurn;
}

number calcFirepower(){
    //I dont know how to make this efficient so max firepower everytime.
    return 3;
}

number calcbullettraveltime(number bulletVelocity){
    return (lastKnownDistanceToEnemy / bulletVelocity);
}
