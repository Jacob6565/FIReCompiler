RobotProperties
{
      RobotName:TheDestroyer;
      RobotType:advancedRobot;
      BodyColor:yellow;
      GunColor:red;
      RadarColor:white;
}

number firepower = 1;
text nameOfRival = "SittingDuck";

bool turnLeftAndRotate(text currentRival)
{
   number degrees = 90;
   nameOfRival = currentRival;
   bool shotAtRival = false;
   bool a[];

   if (nameOfRival == "WallRider")
   {
          fire(firepower);
          shotAtRival = true;
   }

   for(0 upto 2)
   {
       turnLeft(degrees);
   }

   return shotAtRival;
}

void doSomething(){
    number x = 3.7;
    if( x > 2){
        return;
    }
    else{
    x = x + 4.2;
    }
}

strategy Default(number et, number to)
{
    number firepowers[];
    firepowers[1] = 3 ^ 5 ^ (1 + 1);
    firepowers[2] = 2;
    firepowers[3] = 3;
    a = a + b;

    routine()
    {
        turnRadar(360);
        for(0 upto 2)
        {
            ahead(20);
        }
    }

   when (ScannedRobotEvent e)
   {
       text currentRival = e.getName();
       turnLeftAndRotate(currentRival);
       changeStrategy("Offensive");
   }
}

strategy Offensive()
{
   routine()
   {
       fire(1);
   }
   when(LowHealth a)
   {
       changeStrategy("Default");
   }
}

event LowHealth()
{
   turnLeftAndRotate("SittingDuck");

   return getEnergy() <= 50;
}